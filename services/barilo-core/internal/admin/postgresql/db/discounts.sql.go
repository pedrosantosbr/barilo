// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: discounts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const InsertDiscount = `-- name: InsertDiscount :one
INSERT INTO discounts (
  circular_id,
  product_id,
  price
)
VALUES (
  $1,
  $2,
  $3
)
RETURNING id
`

type InsertDiscountParams struct {
	CircularID uuid.UUID
	ProductID  uuid.UUID
	Price      int32
}

func (q *Queries) InsertDiscount(ctx context.Context, arg InsertDiscountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, InsertDiscount, arg.CircularID, arg.ProductID, arg.Price)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const SelectDiscount = `-- name: SelectDiscount :one
SELECT
  discounts.id,
  discounts.circular_id,
  discounts.product_id,
  discounts.price
FROM
  discounts
INNER JOIN
  circulars ON discounts.circular_id = circulars.id
WHERE
  discounts.product_id = $1
AND
  circulars.expiration_date > $2
LIMIT 1
`

type SelectDiscountParams struct {
	ProductID      uuid.UUID
	ExpirationDate pgtype.Date
}

type SelectDiscountRow struct {
	ID         uuid.UUID
	CircularID uuid.UUID
	ProductID  uuid.UUID
	Price      int32
}

func (q *Queries) SelectDiscount(ctx context.Context, arg SelectDiscountParams) (SelectDiscountRow, error) {
	row := q.db.QueryRow(ctx, SelectDiscount, arg.ProductID, arg.ExpirationDate)
	var i SelectDiscountRow
	err := row.Scan(
		&i.ID,
		&i.CircularID,
		&i.ProductID,
		&i.Price,
	)
	return i, err
}
