// Code generated by counterfeiter. DO NOT EDIT.
package resttesting

import (
	"barilo/internal/rest"
	"context"
	"sync"
)

type FakeRecipeService struct {
	GetRecipesStub        func(context.Context, string) (<-chan []byte, <-chan error, error)
	getRecipesMutex       sync.RWMutex
	getRecipesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getRecipesReturns struct {
		result1 <-chan []byte
		result2 <-chan error
		result3 error
	}
	getRecipesReturnsOnCall map[int]struct {
		result1 <-chan []byte
		result2 <-chan error
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecipeService) GetRecipes(arg1 context.Context, arg2 string) (<-chan []byte, <-chan error, error) {
	fake.getRecipesMutex.Lock()
	ret, specificReturn := fake.getRecipesReturnsOnCall[len(fake.getRecipesArgsForCall)]
	fake.getRecipesArgsForCall = append(fake.getRecipesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetRecipesStub
	fakeReturns := fake.getRecipesReturns
	fake.recordInvocation("GetRecipes", []interface{}{arg1, arg2})
	fake.getRecipesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRecipeService) GetRecipesCallCount() int {
	fake.getRecipesMutex.RLock()
	defer fake.getRecipesMutex.RUnlock()
	return len(fake.getRecipesArgsForCall)
}

func (fake *FakeRecipeService) GetRecipesCalls(stub func(context.Context, string) (<-chan []byte, <-chan error, error)) {
	fake.getRecipesMutex.Lock()
	defer fake.getRecipesMutex.Unlock()
	fake.GetRecipesStub = stub
}

func (fake *FakeRecipeService) GetRecipesArgsForCall(i int) (context.Context, string) {
	fake.getRecipesMutex.RLock()
	defer fake.getRecipesMutex.RUnlock()
	argsForCall := fake.getRecipesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRecipeService) GetRecipesReturns(result1 <-chan []byte, result2 <-chan error, result3 error) {
	fake.getRecipesMutex.Lock()
	defer fake.getRecipesMutex.Unlock()
	fake.GetRecipesStub = nil
	fake.getRecipesReturns = struct {
		result1 <-chan []byte
		result2 <-chan error
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRecipeService) GetRecipesReturnsOnCall(i int, result1 <-chan []byte, result2 <-chan error, result3 error) {
	fake.getRecipesMutex.Lock()
	defer fake.getRecipesMutex.Unlock()
	fake.GetRecipesStub = nil
	if fake.getRecipesReturnsOnCall == nil {
		fake.getRecipesReturnsOnCall = make(map[int]struct {
			result1 <-chan []byte
			result2 <-chan error
			result3 error
		})
	}
	fake.getRecipesReturnsOnCall[i] = struct {
		result1 <-chan []byte
		result2 <-chan error
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRecipeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRecipesMutex.RLock()
	defer fake.getRecipesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRecipeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rest.RecipeService = new(FakeRecipeService)
