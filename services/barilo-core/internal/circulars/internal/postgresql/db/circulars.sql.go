// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: circulars.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const SelectCirculars = `-- name: SelectCirculars :many
SELECT
  c.id as circular_id,
  c.name as circular_name,
  c.store_id as circular_store_id,
  c.expiration_date as circular_expiration_date,
  c.created_at as circular_created_at,
  c.updated_at as circular_updated_at,
  s.id as store_id,
  s.name as store_name,
  s.address as store_address
FROM
  circulars as c
INNER JOIN 
  stores as s ON stores.id = circulars.store_id
WHERE
  expiration_date >= NOW()
`

type SelectCircularsRow struct {
	CircularID             uuid.UUID
	CircularName           string
	CircularStoreID        uuid.UUID
	CircularExpirationDate pgtype.Date
	CircularCreatedAt      pgtype.Timestamp
	CircularUpdatedAt      pgtype.Timestamp
	StoreID                uuid.UUID
	StoreName              string
	StoreAddress           string
}

func (q *Queries) SelectCirculars(ctx context.Context) ([]SelectCircularsRow, error) {
	rows, err := q.db.Query(ctx, SelectCirculars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectCircularsRow{}
	for rows.Next() {
		var i SelectCircularsRow
		if err := rows.Scan(
			&i.CircularID,
			&i.CircularName,
			&i.CircularStoreID,
			&i.CircularExpirationDate,
			&i.CircularCreatedAt,
			&i.CircularUpdatedAt,
			&i.StoreID,
			&i.StoreName,
			&i.StoreAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
